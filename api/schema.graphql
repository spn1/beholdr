# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: RoleRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: RoleRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canViewAllUsers: Boolean
  canManageUsers: Boolean
  canManageCreatures: Boolean
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canViewAllUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageCreatures: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canViewAllUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageCreatures: OrderDirection
}

input RoleUpdateInput {
  name: String
  canViewAllUsers: Boolean
  canManageUsers: Boolean
  canManageCreatures: Boolean
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canViewAllUsers: Boolean
  canManageUsers: Boolean
  canManageCreatures: Boolean
}

type Creature {
  id: ID!
  name: String
  challengeRating: Float
  experience: Int
  createdAt: DateTime
  createdBy: User
}

input CreatureWhereUniqueInput {
  id: ID
}

input CreatureWhereInput {
  AND: [CreatureWhereInput!]
  OR: [CreatureWhereInput!]
  NOT: [CreatureWhereInput!]
  id: IDFilter
  name: StringFilter
  challengeRating: FloatFilter
  experience: IntFilter
  createdAt: DateTimeNullableFilter
  createdBy: UserWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CreatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  challengeRating: OrderDirection
  experience: OrderDirection
  createdAt: OrderDirection
}

input CreatureUpdateInput {
  name: String
  challengeRating: Float
  experience: Int
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CreatureUpdateArgs {
  where: CreatureWhereUniqueInput!
  data: CreatureUpdateInput!
}

input CreatureCreateInput {
  name: String
  challengeRating: Float
  experience: Int
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type CreatureList {
  id: ID!
  name: String
  creatures(where: CreatureWhereInput! = {}, orderBy: [CreatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreatureWhereUniqueInput): [Creature!]
  creaturesCount(where: CreatureWhereInput! = {}): Int
  createdAt: DateTime
}

input CreatureListWhereUniqueInput {
  id: ID
}

input CreatureListWhereInput {
  AND: [CreatureListWhereInput!]
  OR: [CreatureListWhereInput!]
  NOT: [CreatureListWhereInput!]
  id: IDFilter
  name: StringFilter
  creatures: CreatureManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CreatureManyRelationFilter {
  every: CreatureWhereInput
  some: CreatureWhereInput
  none: CreatureWhereInput
}

input CreatureListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input CreatureListUpdateInput {
  name: String
  creatures: CreatureRelateToManyForUpdateInput
  createdAt: DateTime
}

input CreatureRelateToManyForUpdateInput {
  disconnect: [CreatureWhereUniqueInput!]
  set: [CreatureWhereUniqueInput!]
  create: [CreatureCreateInput!]
  connect: [CreatureWhereUniqueInput!]
}

input CreatureListUpdateArgs {
  where: CreatureListWhereUniqueInput!
  data: CreatureListUpdateInput!
}

input CreatureListCreateInput {
  name: String
  creatures: CreatureRelateToManyForCreateInput
  createdAt: DateTime
}

input CreatureRelateToManyForCreateInput {
  create: [CreatureCreateInput!]
  connect: [CreatureWhereUniqueInput!]
}

type Encounter {
  id: ID!
  name: String
  creatures(where: CreatureWhereInput! = {}, orderBy: [CreatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreatureWhereUniqueInput): [Creature!]
  creaturesCount(where: CreatureWhereInput! = {}): Int
  totalExperience: Int
  createdAt: DateTime
}

input EncounterWhereUniqueInput {
  id: ID
}

input EncounterWhereInput {
  AND: [EncounterWhereInput!]
  OR: [EncounterWhereInput!]
  NOT: [EncounterWhereInput!]
  id: IDFilter
  name: StringFilter
  creatures: CreatureManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input EncounterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input EncounterUpdateInput {
  name: String
  creatures: CreatureRelateToManyForUpdateInput
  createdAt: DateTime
}

input EncounterUpdateArgs {
  where: EncounterWhereUniqueInput!
  data: EncounterUpdateInput!
}

input EncounterCreateInput {
  name: String
  creatures: CreatureRelateToManyForCreateInput
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createCreature(data: CreatureCreateInput!): Creature
  createCreatures(data: [CreatureCreateInput!]!): [Creature]
  updateCreature(where: CreatureWhereUniqueInput!, data: CreatureUpdateInput!): Creature
  updateCreatures(data: [CreatureUpdateArgs!]!): [Creature]
  deleteCreature(where: CreatureWhereUniqueInput!): Creature
  deleteCreatures(where: [CreatureWhereUniqueInput!]!): [Creature]
  createCreatureList(data: CreatureListCreateInput!): CreatureList
  createCreatureLists(data: [CreatureListCreateInput!]!): [CreatureList]
  updateCreatureList(where: CreatureListWhereUniqueInput!, data: CreatureListUpdateInput!): CreatureList
  updateCreatureLists(data: [CreatureListUpdateArgs!]!): [CreatureList]
  deleteCreatureList(where: CreatureListWhereUniqueInput!): CreatureList
  deleteCreatureLists(where: [CreatureListWhereUniqueInput!]!): [CreatureList]
  createEncounter(data: EncounterCreateInput!): Encounter
  createEncounters(data: [EncounterCreateInput!]!): [Encounter]
  updateEncounter(where: EncounterWhereUniqueInput!, data: EncounterUpdateInput!): Encounter
  updateEncounters(data: [EncounterUpdateArgs!]!): [Encounter]
  deleteEncounter(where: EncounterWhereUniqueInput!): Encounter
  deleteEncounters(where: [EncounterWhereUniqueInput!]!): [Encounter]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  creatures(where: CreatureWhereInput! = {}, orderBy: [CreatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreatureWhereUniqueInput): [Creature!]
  creature(where: CreatureWhereUniqueInput!): Creature
  creaturesCount(where: CreatureWhereInput! = {}): Int
  creatureLists(where: CreatureListWhereInput! = {}, orderBy: [CreatureListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreatureListWhereUniqueInput): [CreatureList!]
  creatureList(where: CreatureListWhereUniqueInput!): CreatureList
  creatureListsCount(where: CreatureListWhereInput! = {}): Int
  encounters(where: EncounterWhereInput! = {}, orderBy: [EncounterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EncounterWhereUniqueInput): [Encounter!]
  encounter(where: EncounterWhereUniqueInput!): Encounter
  encountersCount(where: EncounterWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
